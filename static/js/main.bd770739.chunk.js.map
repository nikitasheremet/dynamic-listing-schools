{"version":3,"sources":["UpdateSchool.js","School.js","AddSchool.js","App.js","serviceWorker.js","index.js","helperFunction.js"],"names":["UpdateSchool","updateSchool","updateClicked","setUpdateClicked","schoolInfo","id","name","about","location","admission","image_url","useState","formFields","setFormFields","useEffect","className","value","onChange","e","target","type","files","onClick","Object","values","includes","alert","School","schoolClicked","setSchoolClicked","style","display","src","width","height","fontWeight","AddSchool","handleAdd","App","schools","setSchools","update","setUpdate","addButtonClicked","setAddButtonClicked","Axios","get","then","result","schoolList","data","rows","reduce","directory","school","formData","createForm","put","console","log","post","map","key","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports","FormData","append"],"mappings":"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","file":"static/js/main.bd770739.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"./styles/UpdateSchool.sass\";\n\nexport default function UpdateSchool({\n  updateSchool,\n  updateClicked,\n  setUpdateClicked,\n  schoolInfo: { id, name, about, location, admission, image_url }\n}) {\n  const [formFields, setFormFields] = useState({\n    name: \"\",\n    about: \"\",\n    location: \"\",\n    admission: \"\",\n    image_url: \"\"\n  });\n\n  useEffect(() => {\n    setFormFields({\n      ...formFields,\n      name,\n      about,\n      location,\n      admission,\n      image_url\n    });\n  }, []);\n  return (\n    <div className=\"update-school-form\">\n      <div className=\"input-field\">\n        <p>School Name</p>\n        <input\n          value={formFields.name}\n          onChange={e => setFormFields({ ...formFields, name: e.target.value })}\n        />\n      </div>\n      <div className=\"input-field\">\n        <p>School Description</p>\n        <input\n          value={formFields.about}\n          onChange={e =>\n            setFormFields({ ...formFields, about: e.target.value })\n          }\n        />\n      </div>\n      <div className=\"input-field\">\n        <p>School Location</p>\n        <input\n          value={formFields.location}\n          onChange={e =>\n            setFormFields({ ...formFields, location: e.target.value })\n          }\n        />\n      </div>\n      <div className=\"input-field\">\n        <p>Admission Requirements</p>\n        <input\n          value={formFields.admission}\n          onChange={e =>\n            setFormFields({ ...formFields, admission: e.target.value })\n          }\n        />\n      </div>\n\n      <div>\n        <p>Update School Picture</p>\n        <input\n          type=\"file\"\n          name=\"image\"\n          onChange={e =>\n            setFormFields({ ...formFields, image_url: e.target.files[0] })\n          }\n        />\n      </div>\n      <div className=\"buttons-update\">\n        <button\n          className=\"save-button\"\n          type=\"submit\"\n          onClick={() => {\n            if (\n              Object.values(formFields).includes(\"\") ||\n              Object.values(formFields).includes(null)\n            ) {\n              alert(\"Please fill out all fields!\");\n            } else {\n              updateSchool(formFields, id);\n              setUpdateClicked(!updateClicked);\n            }\n          }}\n        >\n          Save\n        </button>\n        <button\n          className=\"close\"\n          onClick={() => setUpdateClicked(!updateClicked)}\n        >\n          X\n        </button>\n      </div>\n    </div>\n  );\n}\n","import React, { useState } from \"react\";\nimport UpdateSchool from \"./UpdateSchool\";\nimport \"./styles/School.sass\";\n\nexport default function School({\n  updateSchool,\n  schoolInfo,\n  schoolInfo: { name, about, location, admission, image_url }\n}) {\n  const [updateClicked, setUpdateClicked] = useState(false);\n  const [schoolClicked, setSchoolClicked] = useState(false);\n  return (\n    <div>\n      <div\n        style={{ display: updateClicked ? \"none\" : \"flex\" }}\n        onClick={() => setSchoolClicked(!schoolClicked)}\n        className=\"school-listing\"\n      >\n        <img src={image_url} style={{ width: \"120px\", height: \"100px\" }} />\n        <div className=\"school-info\">\n          <div className=\"school-unclicked\">\n            <div style={{ fontWeight: \"bolder\" }}>{name}</div>\n          </div>\n          <div\n            className=\"school-clicked\"\n            style={{ display: schoolClicked ? \"flex\" : \"none\" }}\n          >\n            <div className=\"school-clicked-info\">\n              <div>\n                <span style={{ fontWeight: \"bolder\" }}>About:</span> {about}\n              </div>\n              <div>\n                <span style={{ fontWeight: \"bolder\" }}>Location:</span>{\" \"}\n                {location}\n              </div>\n              <div>\n                <span style={{ fontWeight: \"bolder\" }}>\n                  Admission Requirements:\n                </span>{\" \"}\n                {admission}\n              </div>\n            </div>\n            <button\n              className=\"school-update-button\"\n              onClick={() => setUpdateClicked(!updateClicked)}\n            >\n              Update\n            </button>\n          </div>\n        </div>\n      </div>\n      <div\n        className=\"update-form\"\n        style={{ display: updateClicked ? \"flex\" : \"none\" }}\n      >\n        <UpdateSchool\n          schoolInfo={schoolInfo}\n          updateSchool={updateSchool}\n          updateClicked={updateClicked}\n          setUpdateClicked={setUpdateClicked}\n        />\n      </div>\n    </div>\n  );\n}\n","import React, { useState } from \"react\";\nimport \"./styles/AddSchool.sass\";\n\nexport default function AddSchool({ handleAdd }) {\n  const [formFields, setFormFields] = useState({\n    name: \"\",\n    about: \"\",\n    location: \"\",\n    admission: \"\",\n    image_url: \"\"\n  });\n\n  const handleAddSchool = () => {\n    if (Object.values(formFields).includes(\"\")) {\n      alert(\"Please fll out all fields\");\n    } else {\n      handleAdd(formFields);\n      setFormFields({\n        ...formFields,\n        name: \"\",\n        about: \"\",\n        location: \"\",\n        admission: \"\",\n        image_url: \"\"\n      });\n    }\n  };\n\n  return (\n    <div className=\"add-school-form\">\n      <div className=\"input-field\">\n        <p>School Name</p>\n        <input\n          value={formFields.name}\n          onChange={e => setFormFields({ ...formFields, name: e.target.value })}\n        />\n      </div>\n      <div className=\"input-field\">\n        <p>School Description</p>\n        <input\n          value={formFields.about}\n          onChange={e =>\n            setFormFields({ ...formFields, about: e.target.value })\n          }\n        />\n      </div>\n      <div className=\"input-field\">\n        <p>School Location</p>\n        <input\n          value={formFields.location}\n          onChange={e =>\n            setFormFields({ ...formFields, location: e.target.value })\n          }\n        />\n      </div>\n      <div className=\"input-field\">\n        <p>Admission Requirements</p>\n        <input\n          value={formFields.admission}\n          onChange={e =>\n            setFormFields({ ...formFields, admission: e.target.value })\n          }\n        />\n      </div>\n      <div>\n        <p>Upload School Picture</p>\n        <input\n          type=\"file\"\n          name=\"image\"\n          onChange={e =>\n            setFormFields({ ...formFields, image_url: e.target.files[0] })\n          }\n        />\n      </div>\n      <button onClick={() => handleAddSchool()}>Add</button>\n    </div>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\nimport \"./styles/App.sass\";\nimport Axios from \"axios\";\nimport School from \"./School\";\nimport AddSchool from \"./AddSchool\";\nimport createForm from \"./helperFunction\";\n\nfunction App() {\n  const [schools, setSchools] = useState({});\n  const [update, setUpdate] = useState(true);\n  const [addButtonClicked, setAddButtonClicked] = useState(false);\n\n  useEffect(() => {\n    Axios.get(\"https://cryptic-harbor-64765.herokuapp.com/\").then(result => {\n      let queryResult = result.data.rows;\n      let schoolList = queryResult.reduce((directory, school) => {\n        return {\n          ...directory,\n          [school.id]: {\n            id: school.id,\n            name: school.name,\n            about: school.about,\n            location: school.location,\n            admission: school.admission,\n            image_url: school.image_url\n          }\n        };\n      }, {});\n      setSchools(schoolList);\n    });\n  }, [update]);\n  const handleAdd = ({ name, about, location, admission, image_url }) => {\n    let formData = createForm(name, about, location, admission, image_url);\n    Axios.post(\n      \"https://cryptic-harbor-64765.herokuapp.com/school/add\",\n      formData\n    ).then(() => {\n      setUpdate(!update);\n      setAddButtonClicked(!addButtonClicked);\n    });\n  };\n  const updateSchool = (\n    { name, about, location, admission, image_url },\n    id\n  ) => {\n    let formData = createForm(name, about, location, admission, image_url);\n    Axios.put(\n      `https://cryptic-harbor-64765.herokuapp.com/school/update/${id}`,\n      formData\n    ).then(() => {\n      setUpdate(!update);\n    });\n  };\n  console.log(schools);\n  return (\n    <div className=\"App\">\n      <div className=\"header\">\n        <h2>Dynamic School List</h2>\n        <h4>Home</h4>\n      </div>\n      <div className=\"all-schools\">\n        <h3>List of Schools</h3>\n        <div className=\"add-school-div\">\n          <button\n            className=\"add-school-button\"\n            onClick={() => setAddButtonClicked(!addButtonClicked)}\n          >\n            Add School <span>+</span>\n          </button>\n          <div style={{ display: addButtonClicked ? \"block\" : \"none\" }}>\n            <AddSchool handleAdd={handleAdd} />\n          </div>\n        </div>\n        <div className=\"school-list\">\n          {Object.values(schools).map(school => {\n            return (\n              <School\n                key={school.id}\n                schoolInfo={school}\n                updateSchool={updateSchool}\n              />\n            );\n          })}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","const createForm = (name, about, location, admission, image_url) => {\n  let formData = new FormData();\n  formData.append(\"name\", name);\n  formData.append(\"about\", about);\n  formData.append(\"location\", location);\n  formData.append(\"admission\", admission);\n  formData.append(\"image\", image_url);\n  return formData;\n};\n\nmodule.exports = createForm;\n"],"sourceRoot":""}